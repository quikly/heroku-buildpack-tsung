#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

echo "Tsung Buildpack starts"
set -e
set -x # enable debugging
set -o pipefail   # dont ignore exit codes when piping output
set -o nounset    # fail on unset variables

### Constants

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}

echo ${BUILD_DIR}
echo ${CACHE_DIR}

mkdir -p "$BUILD_DIR/.heroku/node/"
cd $BUILD_DIR
export PATH="$BUILD_DIR/.heroku/node/bin":$PATH

# END CF Common
LOG_FILE='/tmp/node-build-log.txt'
echo "" > "$LOG_FILE"

set -e
set -o pipefail

bpdir=$(cd $(dirname $(dirname $0)); pwd)
mkdir -p "$1" "$2"
build=$(cd "$1/" && pwd)
test -z ${build} && exit
cache=$(cd "$2/" && pwd)
test -z ${cache} && exit

# install Template Toolkit
toolkit_file_name="Template-Toolkit-3.006"
TOOLKIT_URL="http://www.cpan.org/modules/by-module/Template/${toolkit_file_name}.tar.gz"

echo "-----> Download $toolkit_file_name"

cd ${cache}
curl -sO ${TOOLKIT_URL}
echo "Download $toolkit_file_name done"
tar zxf "${toolkit_file_name}.tar.gz"
cd $toolkit_file_name

perl Makefile.PL TT_ACCEPT=y PREFIX=${build}
make
make install

echo "-----> Template Toolkit install done"

# Start getting erlang
DEFAULT_OTP_VERSION="master"
if [ -f ${build}/.preferred_otp_version ]; then
    OTP_VERSION=$(cat ${build}/.preferred_otp_version)
fi
ver="OTP-22.2.7"
tarball=${ver}.tgz

OTP_TARBALL_URL="https://svn.marco-gatti.com/heroku/heroku-18/${tarball}"
ERLROOT=${build}/otp
PROFILE=${build}/.profile.d

echo "-----> Using Erlang/OTP $ver"

(
    set -e

    # Already cached?
    test -f ${cache}/${tarball} && exit

    rm -rf ${cache}/* # be sure not to build up cruft
    cd ${cache}
    echo "-------> Fetching Erlang/OTP $ver"
    curl -sO ${OTP_TARBALL_URL} || exit 1
)

echo "-------> Unpacking Erlang/OTP $ver"
mkdir -p ${ERLROOT}
tar zxf ${cache}/${tarball} -C ${ERLROOT}
echo "-------> Installing Erlang/OTP $ver"
ln -s ${ERLROOT} /app/otp
${ERLROOT}/Install -minimal /app/otp

PATH=/app/otp/bin:$PATH
export PATH

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}


TSUNG_ROOT=$build/tsung
mkdir -p ${TSUNG_ROOT}

# Download tsung

echo "-----> Downloading Tsung"
cd $cache

DEFAULT_TSUNG_VERSION="1.7.0"
if [ -f ${build}/.preferred_tsung_version ]; then
    TSUNG_VERSION=$(cat ${build}/.preferred_tsung_version)
fi
TSUNG_VER=${TSUNG_VERSION:=${DEFAULT_TSUNG_VERSION}}
TSUNG_TARBALL=tsung-${TSUNG_VER}.tar.gz


echo "-----> Tsung Version"
echo ${TSUNG_VER}

TSUNG_TARBALL_URL="http://tsung.erlang-projects.org/dist/${TSUNG_TARBALL}"

echo "-----> Tsung Tarball URL"
echo ${TSUNG_TARBALL_URL}

curl -sO ${TSUNG_TARBALL_URL} || exit 1

tar zxf ${TSUNG_TARBALL} -C ${TSUNG_ROOT} --strip-components=1

cd ${TSUNG_ROOT}

# configure
if [ -f configure ]; then
  echo "-----> Configuring"
  ./configure 2>&1 | indent
fi

# make
echo "-----> Compiling with Make"
make 2>&1 | indent

echo "-----> Installing with make install"

make install 2>&1 | indent


echo "-----> Tsung installed"

cp /app/otp/bin/erl /app/bin/erl

echo "-----> ls /"
ls /app

echo "-----> ls /app/bin"
ls /app/bin

echo "-----> ls /app/otp"
ls /app/otp

echo "-----> ls /app/otp/bin"
ls /app/otp/bin

